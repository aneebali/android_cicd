plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.firebase.firebase-perf'
    id 'com.google.gms.google-services'
}

android {
    namespace 'com.example.testingcicd'

    // Load keystore properties if file exists
    def keystore_properties = file('../keystore.properties')
    if (keystore_properties.exists()) {
        Properties props = new Properties()
        props.load(new FileInputStream(keystore_properties))
        props.each { prop ->
            project.ext.set(prop.key, prop.value)
        }
    }

    // Read passwords from Gradle properties and if not found, then from environment variables
    def keystore_password = project.hasProperty('KEYSTORE_PASSWORD') ? KEYSTORE_PASSWORD : System.getenv("KEYSTORE_PASSWORD")
    def key_alias = project.hasProperty('KEY_ALIAS') ? KEY_ALIAS : System.getenv("KEY_ALIAS")
    def key_password = project.hasProperty('KEY_PASSWORD') ? KEY_PASSWORD : System.getenv("KEY_PASSWORD")

    def isJenkinsBuild = project.hasProperty('storeFile') && project.hasProperty('storePass') &&
            project.hasProperty('keyAlias') && project.hasProperty('keyPass')

    if (isJenkinsBuild) {
        signingConfigs {
            release {
                storeFile file(project["storeFile"])
                storePassword project["storePass"]
                keyAlias project["keyAlias"]
                keyPassword project["keyPass"]
            }
        }
    }
    /*signingConfigs {
        release {
            storeFile file('../test.jks')
            storePassword keystore_password
            keyAlias key_alias
            keyPassword key_password
        }
    }*/

    compileSdk 33

    defaultConfig {
        applicationId "com.example.testingcicd"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {

        release {
            minifyEnabled false
            if (isJenkinsBuild) {
                signingConfig signingConfigs.release
            }
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            /*if (keystore_password && key_alias && key_password) {
                minifyEnabled false
                signingConfig signingConfigs.release
            } else {
                logger.error("You need to define KEYSTORE_PASSWORD, KEY_ALIAS and KEY_PASSWORD to enable release signing.")
            }*/
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    // Import the BoM for the Firebase platform
    implementation(platform("com.google.firebase:firebase-bom:32.7.3"))
    implementation 'com.google.firebase:firebase-analytics'
    // Add the dependency for the Performance Monitoring library
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation("com.google.firebase:firebase-perf")


    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}